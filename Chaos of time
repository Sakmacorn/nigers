import pygame
import math
import random

# Initialize pygame
pygame.init()

# Create display window
SCREEN_WIDTH = 1200
SCREEN_HEIGHT = 675
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Chaos Of Time")

# Game variables
game_paused = False
game_started = False
scrolling = False
game_over = False

# Movement variables
x = 50
y = SCREEN_HEIGHT - 70
width = 64
height = 64
vel = 1
walkCount = 0

platform_y = SCREEN_HEIGHT - 70

# character jump
isJump = False
jumpCount = 1
gravity = 0.1
fallSpeed = 1
jumpSpeed = -7
left = False
right = False

# Define fonts and colors
font = pygame.font.SysFont("arialblack", 40)
TEXT_COL = (255, 255, 255)

# Load character images
walkRight = [pygame.image.load('characters/R1.png'), pygame.image.load('characters/R2.png'), pygame.image.load('characters/R3.png'),
             pygame.image.load('characters/R4.png'), pygame.image.load('characters/R5.png'), pygame.image.load('characters/R6.png'),
             pygame.image.load('characters/R7.png'), pygame.image.load('characters/R8.png'), pygame.image.load('characters/R9.png')]

walkLeft = [pygame.image.load('characters/L1.png'), pygame.image.load('characters/L2.png'), pygame.image.load('characters/L3.png'),
            pygame.image.load('characters/L4.png'), pygame.image.load('characters/L5.png'), pygame.image.load('characters/L6.png'),
            pygame.image.load('characters/L7.png'), pygame.image.load('characters/L8.png'), pygame.image.load('characters/L9.png')]

char = pygame.image.load('characters/standing.png')

# Load button images
start_img = pygame.image.load('images/start_curve.jpg').convert()
start_img.set_colorkey((0, 0, 0))
start_img = pygame.transform.scale(start_img, (int(380), (int(221))))

exit_img = pygame.image.load('images/exit_curve.jpg').convert()
exit_img.set_colorkey((0, 0, 0))
exit_img = pygame.transform.scale(exit_img, (int(380), (int(221))))

title_img = pygame.image.load('images/chaos 3.jpg').convert()
title_img.set_colorkey((0, 0, 0))
title_img = pygame.transform.scale(title_img, (int(1000), int(350)))

back_img = pygame.image.load('images/back-button-hi.png').convert()
back_img.set_colorkey((255, 255, 255))
back_img = pygame.transform.scale(back_img, (int(200), int(200)))


# Load obstacle image
obstacle_img = pygame.image.load('images/bullet black.png').convert_alpha()
obstacle_img = pygame.transform.scale(obstacle_img, (50, 50))  # Adjust size as needed

# Obstacles variables
obstacles = []
obstacle_timer = pygame.time.get_ticks()
OBSTACLE_WIDTH, OBSTACLE_HEIGHT = 30, 30
OBSTACLES_SPEED = 2

# Button class
class Button:
    def __init__(self, x, y, image, scale):
        width = image.get_width()
        height = image.get_height()
        self.image = pygame.transform.scale(image, (int(width * scale), int(height * scale)))
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)
        self.clicked = False

    def draw(self):
        action = False
        # Get mouse position
        pos = pygame.mouse.get_pos()

        # Check mouseover
        if self.rect.collidepoint(pos):
            if pygame.mouse.get_pressed()[0] == 1 and self.clicked == False:
                self.clicked = True
                action = True

        if pygame.mouse.get_pressed()[0] == 0:
            self.clicked = False

        # Draw button on screen
        screen.blit(self.image, (self.rect.x, self.rect.y))

        return action

# Load background image and set up scrolling
bg = pygame.image.load("images/infinite background.jpg").convert()
bg_main = pygame.image.load("images/girly-transformed.png").convert()
bg_width = bg.get_width()
scroll = 0
tiles = math.ceil(SCREEN_WIDTH / bg_width) + 1

overlay = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.SRCALPHA)
overlay.fill((0, 0, 0, 100))

# Function to draw text
def draw_text(text, font, text_col, x, y):
    img = font.render(text, True, text_col)
    screen.blit(img, (x, y))

# Function to draw character and background
def redrawGameWindow():
    global walkCount

    # Draw background and character
    if walkCount + 1 >= 27:
        walkCount = 0

    if left:
        screen.blit(walkLeft[walkCount // 3], (x, y))
        walkCount += 1
    elif right:
        screen.blit(walkRight[walkCount // 3], (x, y))
        walkCount += 1
    else:
        screen.blit(char, (x, y))

    pygame.display.update()

# Button instances with adjusted positions
start_button = Button(200, 360, start_img, 0.9)
exit_button = Button(655, 360, exit_img, 0.9)
back_button = Button(50, 50, back_img, 0.5)

# Game loop
run = True
show_character = True  # Variable to track whether the character is shown or not
while run:
    screen.blit(bg_main, (0, 0))

    # Draw scrolling background
    if scrolling:
        for i in range(0, tiles):
            screen.blit(bg, (i * bg_width + scroll, 1))

        scroll -= 0.2

        # Reset scroll
        if abs(scroll) > bg_width:
            scroll = 0

    if not game_started:
        # Show the title image at the top
        screen.blit(title_img, (110, 70))  # Adjust the coordinates as needed

        # Show the menu screen buttons
        if start_button.draw():
            game_started = True
            game_paused = False
            scrolling = True
        if exit_button.draw():
            run = False
    else:
        # Show the "Back" button and handle game interaction
        if back_button.draw():
            game_started = False  # Go back to the main menu
            game_paused = False    # Unpause the game if it was paused
            scrolling = False      # Stop scrolling background
            x = 50  # Reset player position
            y = SCREEN_HEIGHT - 70  # Reset player y-position

        # Handle the pause state
        if game_paused:
            # Show the pause overlay and "Press SPACE to resume" message
            screen.blit(overlay, (0, 0))
            draw_text("Press SPACE to resume.", font, TEXT_COL, 345, 300)
            show_character = False  # Hide the character when paused
        else:
            show_character = True  # Show the character when not paused

        # Obstacle creation and movement (only when the game is not paused)
        if not game_paused:
            if pygame.time.get_ticks() - obstacle_timer > 1500:  # Every 1.5 seconds
                obstacle = pygame.Rect(SCREEN_WIDTH, random.randint(SCREEN_HEIGHT - 200, SCREEN_HEIGHT - OBSTACLE_HEIGHT), OBSTACLE_WIDTH, OBSTACLE_HEIGHT)
                obstacles.append(obstacle)
                obstacle_timer = pygame.time.get_ticks()

            # Move and draw obstacles when the game is not paused
            for obstacle in obstacles:
                obstacle.x -= OBSTACLES_SPEED
                screen.blit(obstacle_img, (obstacle.x, obstacle.y))

            # Remove obstacles that go off screen
            obstacles = [ob for ob in obstacles if ob.x > -OBSTACLE_WIDTH]

        # Collision detection
        player_rect = pygame.Rect(x, y, width, height)  # Player's hitbox
        for obstacle in obstacles:
            if player_rect.colliderect(obstacle):
                run = False  # End the game on collision

        # Movement code for the character if game is not paused and character is shown
        if show_character:
            keys = pygame.key.get_pressed()

            if keys[pygame.K_a] and x > vel:
                x -= vel
                left = True
                right = False
            elif keys[pygame.K_d] and x < 1200 - width - vel:
                x += vel
                left = False
                right = True
            else:
                left = False
                right = False
                walkCount = 0

            if not isJump:
                if keys[pygame.K_s]:
                    isJump = True
                    fallSpeed = jumpSpeed
            else:
                y += fallSpeed
                if fallSpeed < 1:
                    fallSpeed += gravity
                if y >= platform_y - height:
                    y = platform_y - height
                    isJump = False
                    fallSpeed = 0

            redrawGameWindow()

    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                if game_started:
                    game_paused = not game_paused
                    scrolling = not scrolling
        if event.type == pygame.QUIT:
            run = False

    pygame.display.update()

pygame.quit()
